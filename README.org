* MatrixProtocolClient.jl

The is the README for the [[https://github.com/non-Jedi/MatrixProtocolClient.jl][MatrixProtocolClient.jl]] implementation of a client for
[[https://matrix.org/docs/spec/client_server/r0.3.0.html][version r0.3.0 of the matrix.org Client-Server API]]. As a [[https://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][literate program]], this
document is also the canonical source code for MatrixProtocolClient.jl.

All text in this document, the source code generated from this document, and all
other associated files are under copyright of [[Authors][the authors of
MatrixProtocolClient.jl]] unless otherwise noted. The aforementioned items are
available for your use subject to [[https://github.com/non-Jedi/MatrixProtocolClient.jl/blob/master/LICENSE.md][the GNU Public License, Version 3.0+]]. Within
this document, sections are quoted from the Client-Server API spec for matrix
and from [[https://github.com/matrix-org/matrix-doc/tree/client-server/r0.3.0/api][the swagger-compatible representation of the matrix APIs]]. All such
quotes will be called out with a footnote or some other attribution, and usage
of those quotes must follow the terms of [[https://github.com/matrix-org/matrix-doc/blob/client-server/r0.3.0/LICENSE][the license for the matrix.org
specification]].

** Contributing

At this time this project follows a workflow for non-core contributors as
follows:

1. Fork [[https://github.com/non-Jedi/MatrixProtocolClient.jl][the repository for this software on github]].
2. Checkout a new branch of the repository locally.
3. Make changes to README.org on your branch.
4. Add your name to [[Authors]].
5. Commit changes, trying your best to follow best practices for commit scoping
   and commit message formatting.
6. Push your branch back to a branch on your github fork of the project.
7. Issue a pull request from your branch to the master branch of the root
   repository.
8. I will review your pull request, merge it, generate the new "tangled" source
   code from README.org, and push a new commit to master.

If you are experienced with org-mode, you may include a commit generating new
source code in your pull request. A description of how to do so is available in
the org-mode documentation.

By issuing a pull request to this repository, you agree to release your
contribution under [[https://github.com/non-Jedi/MatrixProtocolClient.jl/blob/master/LICENSE.md][the terms of this project's license]].

** Authors
- [[https://matrix.to/#/@adam:thebeckmeyers.xyz][Adam Beckmeyer]]

** The Program

MatrixProtocolClient.jl is intended as a library to allow developers to easily
write applications making use of the matrix network or otherwise integrate the
matrix network into their Julia application. The initial scope of development
will be as follows, but more functionality may be added over time as needed or
implemented by other contributors:

- login/logout of matrix account
- join/leave matrix rooms
- send basic text messages into matrix rooms

This package makes some architectural decisions that may differ from normal
expectations (in addition to its nature as a literate program of course).
Although the Julia package ecosystem does not currently have [[https://sans-io.readthedocs.io/][a sans-io]]
implementation of HTTP, such a model is the preference of the library author, so
string representations of request/response bodies and query parameters will be
made available whenever practical. Rather than representing the many JSON forms
of matrix as hash maps, this library defines a native Julia struct to
deserialize/serialize JSON to/from. These structs will be generated from the
swagger-compatible representation of the API.

*** HTTP Endpoints

Here we'll create types and functions to make access of the matrix HTTP apis
convenient. First, we should make it possible to login.

**** Login

First of all, login endpoints along with many parts of matrix use "types" with
Java-style namespaces. For login, we have ~m.login.password~ for example. We'll
represent these with a simple parametric type with no fields where the parameter
will be a tuple of the form ~(:m, :login, :password)~. This will allow
specialization and dispatching on these types when they appear.

For convenience, we'll also define abstract types for grouping processed
requests and responses from the matrix server. In general, functions calling
matrix api endpoints should accept ~MatrixRequest~ type arguments and return
~MatrixResponse~.

#+NAME: matrix-type
#+BEGIN_SRC julia
  struct MatrixType{T} end

  abstract type MatrixRequest{M} end

  abstract type MatrixResponse end
#+END_SRC

Even though we're only designing the system for logging in now, we can see that
we'll need to be able to send a wide variety of HTTP requests. So let's define a
basic fallback function for that purpose.

#+NAME: matrix-request
#+BEGIN_SRC julia
  import HTTP

  export request

  """
      request(::MatrixRequest)::MatrixResponse

  Calls a matrix endpoint and returns a processed response.
  """
  function request(req::MatrixRequest)::MatrixResponse
      res = HTTP.request(method(req), url(req), headers(req), body(req))
      # We expect different response formats depending on details of request
      process_response(req, res)
  end#function
#+END_SRC

This begins to show us what methods need an implementation for all
~MatrixRequest~ types, defining the interface: 

- ~method~
- ~url~
- ~headers~
- ~body~
- ~process_response~
- ~response_type~ which will be shown later

For the first, this is why we made ~MatrixRequest~ parametric. We define
~method~ as follows.

#+NAME: method
#+BEGIN_SRC julia
  function method(req::MatrixRequest{M})::AbstractString where {M}
      if M in (:GET, :HEAD, :POST, :PUT, :DELETE, :TRACE, :OPTIONS, :CONNECT, :PATCH)
          string(M)
      else
          throw(DomainError(M, "Not a valid HTTP method."))
      end#if
  end#function
#+END_SRC

For ~url~, we will assume that ~MatrixRequest~ has a ~homeserver~ field. We also
must define ~path~ and ~query~ methods which will specify the ~path~ field and
no query params as the default case. We can override these assumption later if
necessary for specific types.

#+NAME: url
#+BEGIN_SRC julia
  import HTTP.URIs: URI

  url(req::MatrixRequest)::URI =
      URI(; host=req.homeserver, path=req.path, query=query(req))
  path(req::MatrixRequest) = req.path
  query(::MatrixRequest) = ""
#+END_SRC

Specific headers may be needed on each endpoint, but the most common header
needed by matrix is the ~Authorization~ header for transmitting the user's
access token. ~MatrixRequest~ types will have to opt out of having this token
sent in the headers.

#+NAME: headers
#+BEGIN_SRC julia
  headers(req::MatrixRequest) = defaultheaders(req)
  defaultheaders(req::MatrixRequest) = ("Authorization" => "Bearer " * token(req),)
  token(req::MatrixRequest) = req.token
#+END_SRC

~body(req)~ should default to empty since =GET= request shouldn't have bodies.

#+NAME: body
#+BEGIN_SRC julia
  body(::MatrixRequest) = Vector{UInt8}()
#+END_SRC

The most complicated of these methods is ~process_response~, and we get to
offload most of that to JSON2.jl. The most important part for us to implement is
making sure that each ~MatrixRequest~ provides JSON2 with a type it can parse
the response into. For return material that is not json, this method will need
to be overridden. As a default, if no custom type is provided, JSON2 will parse
the response into a NamedTuple.

#+NAME: process_response
#+BEGIN_SRC julia
  import JSON2

  function process_response(req::MatrixRequest, res::HTTP.Response)
      # TODO: error handling for failure to parse
      JSON2.read(String(res.body), response_type(req))
  end#function

  response_type(::MatrixRequest) = NamedTuple
#+END_SRC

#+BEGIN_SRC julia :tangle src/MatrixHTTP.jl :noweb yes :comments noweb
  module MatrixHTTP

  <<matrix-type>>
  <<matrix-request>>
  <<method>>
  <<url>>
  <<headers>>
  <<body>>
  <<process_response>>

  end#module
#+END_SRC

*** MatrixProtocolClient.jl

This file ties all of the previous work together, making modules available to
other modules, etc.

#+BEGIN_SRC julia :tangle src/MatrixProtocolClient.jl :comments noweb
  module MatrixProtocolClient

  include("MatrixHTTP.jl")

  end#module
#+END_SRC

This file runs all the tests written in other files.

#+BEGIN_SRC julia :tangle test/runtests.jl :comments noweb
  using Test

#+END_SRC
